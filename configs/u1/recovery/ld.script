/****************************************************************************
 * configs/u1/recovery/ld.script
 *
 *   Copyright (C) 2019 FishSemi Inc. All rights reserved.
 *   Author: Fishsemi <fishsemi@fishsemi.com>
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name NuttX nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

MEMORY
{
	flash (rx)  : ORIGIN = 0x02040000, LENGTH = 256K
	cpram (rwx) : ORIGIN = 0x60000000, LENGTH = 160K
	cpram1(rwx) : ORIGIN = 0x60028000, LENGTH = 304K
	spram (rwx) : ORIGIN = 0x21000000, LENGTH = 112K
	apram (rwx) : ORIGIN = 0xb1000000, LENGTH = 192K
}

ENTRY(__startup)
SECTIONS
{
	.start : {
		_sflash = ABSOLUTE(.);
		KEEP(*(.start_vectors))

		/* explictly specify the offset of link tags */
		. = 0x400;
		/* image magic */
		LONG(0x21494350)
		LONG(_sflash)
		LONG(_eflash - _sflash)
		LONG(__startup)

		*(.start .start.*)
	} > flash

	_sflashap = LOADADDR(.text);
	.text : ALIGN(8) {
		_stext = ABSOLUTE(.);
		KEEP(*(.vectors))

		*(.text .text.*)
		*(.fixup)
		*(.gnu.warning)
		*(.gnu.linkonce.t.*)
		*(.glue_7)
		*(.glue_7t)
		*(.got)
		*(.gcc_except_table)
		*(.gnu.linkonce.r.*)
		_etext = ABSOLUTE(.);
	} > cpram AT > flash

	.init_section : {
		_sinit = ABSOLUTE(.);
		KEEP(*(.init_array .init_array.*))
		_einit = ABSOLUTE(.);
	} > cpram AT > flash

	.ARM.extab : {
		*(.ARM.extab*)
	} > cpram AT > flash

	__exidx_start = ABSOLUTE(.);
	.ARM.exidx : {
		*(.ARM.exidx*)
	} > cpram AT > flash
	__exidx_end = ABSOLUTE(.);

	.copy.table : {
		_scopytable = ABSOLUTE(.);
		_ecopytable = ABSOLUTE(.);
	} > cpram AT > flash

	_framfuncs = LOADADDR(.ramfunc);
	.ramfunc : {
		_sramfuncs = ABSOLUTE(.);
		*(.ramfunc .ramfunc.*)
		_eramfuncs = ABSOLUTE(.);
	} > cpram AT > flash

	_eflashap = LOADADDR(.data);
	_eronly = LOADADDR(.data);

	. = ALIGN(8);
	.data : ALIGN(8) {
		_sdata = ABSOLUTE(.);
		*(.rodata .rodata.*)
		*(.data .data.*)
		*(.gnu.linkonce.d.*)
		CONSTRUCTORS
		_edata = ABSOLUTE(.);
	} > spram AT > flash

	_eflash = LOADADDR(.data) + SIZEOF(.data);

	.noload (NOLOAD) : {
		*(.dma .dma.*)
		*(.ram_vectors .ram_vectors.*)
	} > spram

	.bss : {
		_sbss = ABSOLUTE(.);
		*(.bss .bss.*)
		*(.gnu.linkonce.b.*)
		*(COMMON)
		. = ALIGN(8);
		_ebss = ABSOLUTE(.);
	} > spram

	_eheap = ORIGIN(spram) + LENGTH(spram);

	_sheap2 = ORIGIN(cpram1);
	_eheap2 = ORIGIN(cpram1) + LENGTH(cpram1);

	_apram_base = ORIGIN(apram);
	_apram_size = LENGTH(apram);

	/* Stabs debugging sections. */
	.stab 0 : { *(.stab) }
	.stabstr 0 : { *(.stabstr) }
	.stab.excl 0 : { *(.stab.excl) }
	.stab.exclstr 0 : { *(.stab.exclstr) }
	.stab.index 0 : { *(.stab.index) }
	.stab.indexstr 0 : { *(.stab.indexstr) }
	.comment 0 : { *(.comment) }
	.debug_abbrev 0 : { *(.debug_abbrev) }
	.debug_info 0 : { *(.debug_info) }
	.debug_line 0 : { *(.debug_line) }
	.debug_pubnames 0 : { *(.debug_pubnames) }
	.debug_aranges 0 : { *(.debug_aranges) }
}
